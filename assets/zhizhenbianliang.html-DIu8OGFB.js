import{_ as p,r as o,o as c,c as i,b as n,d as a,e,a as t}from"./app-9QopI4S6.js";const r={},l=t('<h2 id="指针是什么" tabindex="-1"><a class="header-anchor" href="#指针是什么" aria-hidden="true">#</a> 指针是什么</h2><p>指针是C语言的精华所在，也是容易让人感觉到困惑的主题。指针变量是一种特殊类型的变量，它存储的是内存地址，不是直接存储数据值，可以通过指针变量，间接的访问和操作内存中的数据。指针变量常用于动态内存分配，函数参数传递，数据结构实现。</p><h2 id="什么是内存" tabindex="-1"><a class="header-anchor" href="#什么是内存" aria-hidden="true">#</a> 什么是内存</h2><p>在冯诺依曼计算机结构中，存储器是五大组成之一，存储器分为RAM和ROM。RAM(random access memory)是随机存取存储器，储存在RAM的数据会在掉电后丢失。在计算机中，RAM分为SRAM和DRAM，SRAM一般位于CPU的内部，被习惯性叫做Cache(缓存)，分为L1、L2和L3 Cache，CPU在读取读取数据的时候，会从高速的Cache中读取，如果Cache中没有命中，就会将数据从DRAM读取到SRAM中，CPU再从SRAM读取数据。</p><p>在编程的过程中，地址通常指的是虚拟地址，而不是物理地址。虚拟地址由CPU生成，并由MMU(Memory Management Uint)内存管理单元将虚拟地址转换成物理地址，然后由内存控制器访问SRAM或DRAM的物理地址。</p><p>SRAM是静态RAM，数据在不断电的情况下会一直保持。DRAM是动态RAM，需要周期性的刷新数据，否则数据会消失。在内存的最小单元bit(比特)中，SRAM通常是由6个晶体管构成的一个双稳态触发器，DRAM通常是由一个晶体管和一个电容构成。SRAM的速度更快，成本更高，功耗更低，占用面积更大，在一个CPU中SRAM的内存容量通常只有几十兆，而现在主流的DRAM的数据大小是16G起。</p><h2 id="内存的物理组成方式" tabindex="-1"><a class="header-anchor" href="#内存的物理组成方式" aria-hidden="true">#</a> 内存的物理组成方式</h2>',7),u={href:"https://www.bilibili.com/video/BV1Qq4y137pq?vd_source=270a655e457d531e3d4594a8e9cb7a25",target:"_blank",rel:"noopener noreferrer"},d=t(`<p><img src="https://s11.ax1x.com/2024/03/03/pFB0vSf.png" alt="DRAM和SRAM的一个bit"></p><p>SRAM的一个bit(称为cell)，用到了三根数据线，位线、字线和字非线，DRAM的一个bit用到了两根数据线，字线，位线。字线用于读写操作，位线用于选中储存单位，为了简化流程图，以下关于RAM的读写，采用更加简单的DRAM的原理图。在DRAM的一个字节中，在给BitLine施加高电平后，就可以通过WordLine0 - WordLine7读写内存数据。</p><p><img src="https://s11.ax1x.com/2024/03/03/pFBBquF.png" alt="DRAM的一个字节.png"></p><p>由多个cell单元组成的内存阵列，就是Memory Array，如下图所示，这是一个8x8的Memory Array，对于它来说，定位一个cell需要3根Column地址线和3根Row地址线。当一个Memory Array的的矩阵是1024x1014的时候，他需要的10根Column地址线和10根Row地址线，这样需要的线实在是太多了。因此，我们采用对Row和Column进行先后访问的方式，这样只需要共用Row的地址线了，然后再加上两条低电平有效的控制线，和一条低电平有效的读写控制线，就能实现对所有的bit进行读写操作，代价仅仅是读写速度减少一半。当RAS信号传入后，会根据地址线的值，用Row译码器解码，将对应的BitLine的值设置为高电平，然后CAS信号传入，这个时候，column选择器再将对应的DATA，从数据总线传出，图中，就是将bitLine3和WorldLine4对应的bit，将其从从Data数据线传出了。</p><p><img src="https://s11.ax1x.com/2024/03/04/pFDez26.png" alt="pFDez26.png"></p><p>如下图所示，我们将8个Memory Array的所有控制线，按照同一种功能连接在一起，然后将DATA输出线按顺序排列，就形成了内存的最小控制单元<strong>Bank</strong>，Memory Controller是直接对Bank进行下达读写指令的。每次读写都是以8bits为单位。一般来说，一个bank由八个同样的Array组成。同时进行同一位置的读取，一次性输出<strong>8bits</strong>，也就是一个字节<strong>1Byte</strong>。这也就是为什么计算机不支持bit级，只支持Byte级的内存访问。从实际的物理地址上看，Byte中的8个bite并不是连续的，它们在计算机的虚拟地址都是一样的，输出的结果不过是按照排列有先后顺序。</p><p><img src="https://s11.ax1x.com/2024/03/04/pFDndpt.png" alt="pFDndpt.png"></p><p>对于DDR5内存来说，它们的一个Memory Array，就有着65326x8192个bit。从镁光的DDR5颗粒上分析来看，貌似镁光的2GB的内存颗粒，并未采用8个Memory Array组成一个Bank的设计方式，一个Bank的译码器连接了65326根BitLine，有16根地址线，它的选择期器直接连接了8192根Worldline，有10根地址线(通过复用器，复用了16根BitLine中的10根)，输出8个bit(一个二进制数据对应8根连续的字线)，一个字节的数据。 如图所示，这是内存颗粒的组成结构，多个cell组成一个Memory Array，8个Memory Array组成一个Bank，多个Bank组成一个库，多个库组合成一个chip，也就是内存芯片。</p><p><img src="https://s21.ax1x.com/2024/03/07/pFsPOeA.png" alt="pFsPOeA.png"></p><h2 id="内存的读写" tabindex="-1"><a class="header-anchor" href="#内存的读写" aria-hidden="true">#</a> 内存的读写</h2><p>我们以DDR5内存为例，当确定一个chip中存储1字节的位置时，需要31位地址，前3位用于确定8个库组中的哪一个库，后面2位用于确定库中的哪一个bank，后面16位数据确定是一个Bank中65326行中的确定行，最后的10位用于确定是8192列中的哪8列。然后将选中的8bits数据通过data数据线输出。在物理形式上，从CPU到DRAM的地址线，只用了21根，5根用于确定是哪一个Bank，16根用于确定是哪一行，而确定那一列复用了这21根。一根16G的DDR5内存条，有8颗内存chip，每颗内存颗粒有8根数据线，cpu每一次读内存颗粒，都是读取8字节，64bits的数据。</p><p>用以下代码举例，P2_var的地址是<strong>0xbfefef08</strong>，这个地址是虚拟内存地址，CPU需要将其翻译成物理地址，这个过程由内存管理单元(MMU)负责，这样才能访问到真实的物理内存。内存管理单元会将其转换成31位数的物理地址，在进行内存读写。</p><p><img src="https://s21.ax1x.com/2024/03/07/pFsAtf0.png" alt="pFsAtf0.png"></p><h2 id="创建普通变量" tabindex="-1"><a class="header-anchor" href="#创建普通变量" aria-hidden="true">#</a> 创建普通变量</h2><p>普通变量的创建方式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">//声明一个普通名为normal_var的变量并且进行赋值</span>
    <span class="token keyword">int</span> normal_var <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the normal_var is :%d\\n&quot;</span><span class="token punctuation">,</span> normal_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建指针变量" tabindex="-1"><a class="header-anchor" href="#创建指针变量" aria-hidden="true">#</a> 创建指针变量</h2><p>创建一个指针变量和普通变量，并将指针变量的地址指向普通变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 声明一个普通变量</span>
    <span class="token keyword">int</span> normal_var1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment">// 声明一个指针变量</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>P2_var<span class="token punctuation">;</span>
    <span class="token comment">// 将指针变量的地址指向普通变量</span>
    P2_var <span class="token operator">=</span> <span class="token operator">&amp;</span>normal_var1<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the normal variable:%d\\n&quot;</span><span class="token punctuation">,</span> normal_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the address of the P2_var:%x\\n&quot;</span><span class="token punctuation">,</span> P2_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the P2_var:%d\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>P2_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个指针变量，且给变量赋值:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 声明一个指针变量</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>P2_var1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 分配内存</span>
    P2_var1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将内存块里面的值清零</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>P2_var1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 给指针变量赋值</span>
    <span class="token operator">*</span>P2_var1 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the address of the P2_var1:%x\\n&quot;</span><span class="token punctuation">,</span> P2_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the P2_var1:%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>P2_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//不再使用后，释放空间</span>
    <span class="token function">free</span><span class="token punctuation">(</span>P2_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，NULL是标准库中定义的一个常亮，对于指针来说，它表示0，是一个不指向任何地址的值。</p><p>参考资料：</p>`,23),k={href:"https://zhuanlan.zhihu.com/p/136748306",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.bilibili.com/video/BV1Qq4y137pq?vd_source=270a655e457d531e3d4594a8e9cb7a25",target:"_blank",rel:"noopener noreferrer"};function v(h,b){const s=o("ExternalLinkIcon");return c(),i("div",null,[l,n("p",null,[a("内存的最小读取单位是字节(Byte)，一个字节由八个位(bite)组成。SRAM和DRAM在物理的结构组成不一样，按照它们使用到的数据线，将其抽象成以下的原理图。"),n("a",u,[a("点我了解RAM的物理组成和物理读写方式"),e(s)])]),d,n("p",null,[n("a",k,[a("三分钟带你了解冯.诺依曼结构"),e(s)])]),n("p",null,[n("a",m,[a("计算机组成原理之SRAM与DRAM的存储元原理讲解"),e(s)])])])}const _=p(r,[["render",v],["__file","zhizhenbianliang.html.vue"]]);export{_ as default};
