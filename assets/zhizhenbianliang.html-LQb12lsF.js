import{_ as s,r as t,o as e,c as p,b as n,d as o,e as c,a as i}from"./app-tCTvTxt3.js";const l={},r=i(`<h2 id="指针是什么" tabindex="-1"><a class="header-anchor" href="#指针是什么" aria-hidden="true">#</a> 指针是什么</h2><p>指针是C语言的精华所在，也是容易让人感觉到困惑的主题。指针变量是一种特殊类型的变量，它存储的是内存地址，不是直接存储数据值，可以通过指针变量，间接的访问和操作内存中的数据。指针变量常用于动态内存分配，函数参数传递，数据结构实现。</p><h2 id="什么是内存" tabindex="-1"><a class="header-anchor" href="#什么是内存" aria-hidden="true">#</a> 什么是内存</h2><p>在冯诺依曼计算机结构中，存储器是五大组成之一，存储器分为RAM和ROM。RAM(random access memory)是随机存取存储器，储存在RAM的数据会在掉电后丢失。在计算机中，RAM分为SRAM和DRAM，SRAM一般位于CPU的内部，被习惯性叫做Cache(缓存)，分为L1、L2和L3 Cache，CPU在读取读取数据的时候，会从高速的Cache中读取，如果Cache中没有命中，就会将数据从DRAM读取到SRAM中，CPU再从SRAM读取数据。</p><p>在编程的过程中，地址通常指的是虚拟地址，而不是物理地址。虚拟地址由CPU生成，并由MMU(Memory Management Uint)内存管理单元将虚拟地址转换成物理地址，然后由内存控制器访问SRAM或DRAM的物理地址。</p><p>SRAM是静态RAM，数据在不断电的情况下会一直保持。DRAM是动态RAM，需要周期性的刷新数据，否则数据会消失。在内存的最小单元bite(比特)中，SRAM通常是由6个晶体管构成的一个双稳态触发器，DRAM通常是由一个晶体管和一个电容构成。SRAM的速度更快，成本更高，功耗更低，占用面积更大，在一个CPU中SRAM的内存容量通常只有几十兆，而现在主流的DRAM的数据大小是16G起。</p><h2 id="内存的物理读取方式" tabindex="-1"><a class="header-anchor" href="#内存的物理读取方式" aria-hidden="true">#</a> 内存的物理读取方式</h2><p>内存的最小读取单位是字节(Byte)，一个字节由八个位(bite)组成。</p><h3 id="sram的读取" tabindex="-1"><a class="header-anchor" href="#sram的读取" aria-hidden="true">#</a> SRAM的读取</h3><p>SRAM的物理读写控制有三根线来控制，分别是两根字线和一根位线。</p><p><img src="https://s11.ax1x.com/2024/03/03/pFBiobq.png" alt="SRAM.png"></p><p>两根字线用于读写操作，位线用于选中储存单位</p><table><thead><tr><th>W</th><th>W非</th><th>B</th><th>操作</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>读</td></tr></tbody></table><h2 id="创建普通变量" tabindex="-1"><a class="header-anchor" href="#创建普通变量" aria-hidden="true">#</a> 创建普通变量</h2><p>普通变量的创建方式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">//声明一个普通名为normal_var的变量并且进行赋值</span>
    <span class="token keyword">int</span> normal_var <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the normal_var is :%d\\n&quot;</span><span class="token punctuation">,</span> normal_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建指针变量" tabindex="-1"><a class="header-anchor" href="#创建指针变量" aria-hidden="true">#</a> 创建指针变量</h2><p>创建一个指针变量和普通变量，并将指针变量的地址指向普通变量</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 声明一个普通变量</span>
    <span class="token keyword">int</span> normal_var1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment">// 声明一个指针变量</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>P2_var<span class="token punctuation">;</span>
    <span class="token comment">// 将指针变量的地址指向普通变量</span>
    P2_var <span class="token operator">=</span> <span class="token operator">&amp;</span>normal_var1<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the normal variable:%d\\n&quot;</span><span class="token punctuation">,</span> normal_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the address of the P2_var:%x\\n&quot;</span><span class="token punctuation">,</span> P2_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the P2_var:%d\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span>P2_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个指针变量，且给变量赋值:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// 声明一个指针变量</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>P2_var1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 分配内存</span>
    P2_var1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将内存块里面的值清零</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>P2_var1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 给指针变量赋值</span>
    <span class="token operator">*</span>P2_var1 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the address of the P2_var1:%x\\n&quot;</span><span class="token punctuation">,</span> P2_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the data of the P2_var1:%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>P2_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//不再使用后，释放空间</span>
    <span class="token function">free</span><span class="token punctuation">(</span>P2_var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，NULL是标准库中定义的一个常亮，对于指针来说，它表示0，是一个不指向任何地址的值。</p><p>参考资料：</p>`,23),u={href:"https://zhuanlan.zhihu.com/p/136748306",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=t("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[n("a",u,[o("三分钟带你了解冯.诺依曼结构"),c(a)])])])}const h=s(l,[["render",d],["__file","zhizhenbianliang.html.vue"]]);export{h as default};
